/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Telas;

import ConexaoBD.Conexao;
import ConexaoBD.FuncaoConexao;
import DAO.AgenteControlador;
import DAO.AgenteDAO;
import Logica.Agente;
import Logica.ThreadAgente;
import Ultilitarios.FuncaoJCB;
import Ultilitarios.FuncaoJTF;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Nicksson
 */
public class TelaPrincipal extends javax.swing.JFrame {
    
    //Varivel para acesso a TelaAgente
    private TelaAgente telaAgente = null;

    public static ArrayList<String> listaTabelasSelecionadas = new ArrayList<>();//Lista das tabelas do banco conectado que foram Escolhidas pelo Usuário 
    public static ArrayList<Agente> listaAgentesSelecionados = new ArrayList<>();//Lista dos Agentes Escolhidos Pelo Usuário Para Classificação
    public static ArrayList<Thread> listaThreadAgentes = new ArrayList<>();
    public static ArrayList<Boolean> listaControle = new ArrayList<>();
    
    //Variaveis de atribuição de tabelas
    private final String[] linha = new String[]{null};
    private final String[] linha2 = new String[]{null,null};
    private final String[] linha3 = new String[]{null,null,null};
    private final String[] linha4 = new String[]{null,null,null,null};
    
    //váriavel de controle para verificação do término dos agentes
    private int indiceTerminoThreads = 0;

   //Construtor
    private TelaPrincipal() {
        initComponents();
    }

     //Criando o Modelos de tabela classificação
   static DefaultTableModel tmDirvegencia = new DefaultTableModel(null,new String[]{"Agente", "Agente", "Ambiente","Total de Segmentos"}){   
      
       //Impossibilitando a edição da tabela
      @Override
      public boolean isCellEditable(int row, int col){   
             return false;   
      }   
   };  
    //Criando o Modelos de tabela classificação
   static DefaultTableModel tmClassificacao = new DefaultTableModel(null,new String[]{"Agente", "Tabela", "Situação"}){   
      
       //Impossibilitando a edição da tabela
      @Override
      public boolean isCellEditable(int row, int col){   
             return false;   
      }   
   }; 
    //Criando o Modelos de tabela do Banco
   static DefaultTableModel tmTabelasDoBanco = new DefaultTableModel(null,new String[]{"Nome Da Tabela"}){ 
       //Impossibilitando a edição da tabela
      @Override
      public boolean isCellEditable(int row, int col){   
             return false;   
      }    
   };  
    //Criando o Modelos de tabela que seram selecionas pelo o usuário  
   static DefaultTableModel tmTabelasEscolhidas = new DefaultTableModel(null,new String[]{"Nome Da Tabela"}){   
      
        //Impossibilitando a edição da tabela
      @Override
      public boolean isCellEditable(int row, int col){   
             return false;   
      }   
   };  
    //Criando o Modelos de tabela dos Agentes
   static DefaultTableModel tmAgentes = new DefaultTableModel(null,new String[]{"Agente", "Perfil","Metadados"}){   
       //Impossibilitando a edição da tabela
      @Override
      public boolean isCellEditable(int row, int col){   
             return false;   
      }   
   };      
    //Criando o Modelos de Tabela dos Agentes que serão Escolhidos
   static DefaultTableModel tmAgentesEscolhidos = new DefaultTableModel(null,new String[]{"Agente", "Perfil","Metadados"}){   
       //Impossibilitando a edição da tabela
      @Override
      public boolean isCellEditable(int row, int col){   
             return false;   
      }   
   }; 
       
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        painelGuiaPrincipal = new javax.swing.JTabbedPane();
        painelConexao = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        lbBancoDeDados = new javax.swing.JLabel();
        lbServidor = new javax.swing.JLabel();
        lbPorta = new javax.swing.JLabel();
        lbUsuario = new javax.swing.JLabel();
        lbSenha = new javax.swing.JLabel();
        lbNomeDoBanco = new javax.swing.JLabel();
        jcbBancoDeDados = new javax.swing.JComboBox();
        jtfServidor = new javax.swing.JTextField();
        jtfUsuario = new javax.swing.JTextField();
        jtfPorta = new javax.swing.JTextField();
        jtfNmBancoDeDados = new javax.swing.JTextField();
        btSelecionarBancoDeDados = new javax.swing.JButton();
        jcbNmBancoDeDados = new javax.swing.JComboBox();
        btConectar = new javax.swing.JButton();
        jpfSenha = new javax.swing.JPasswordField();
        painelTabelas = new javax.swing.JPanel();
        btTodasTabelas = new javax.swing.JButton();
        btEscolherTabela = new javax.swing.JButton();
        btRetornaTabela = new javax.swing.JButton();
        btRetornaTodos = new javax.swing.JButton();
        btDefinirTabelas = new javax.swing.JButton();
        btVoltarConexao = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelasEscolhidas = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelasDoBanco = new javax.swing.JTable();
        painelAgentes = new javax.swing.JPanel();
        btCriarAgente = new javax.swing.JButton();
        btTodosAgentes = new javax.swing.JButton();
        btSelecionaAgente = new javax.swing.JButton();
        btRetornaAgente = new javax.swing.JButton();
        btLimparAgentes = new javax.swing.JButton();
        btDefinirAgentes = new javax.swing.JButton();
        btVoltarTabelas = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabelaAgentes = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tabelaAgentesSelecionados = new javax.swing.JTable();
        painelClassificar = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tabelaClassificacao = new javax.swing.JTable();
        lbMsgClassificacao = new javax.swing.JLabel();
        btDivergencias = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tabelaDivegencia = new javax.swing.JTable();
        btVoltarClassificacao = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sistema Multiagente");
        setResizable(false);

        painelGuiaPrincipal.setEnabled(false);
        painelGuiaPrincipal.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Conexão com o Banco De Dados", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(0, 0, 0))); // NOI18N

        lbBancoDeDados.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lbBancoDeDados.setText("Banco de Dados:");

        lbServidor.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lbServidor.setText("Servidor:");

        lbPorta.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lbPorta.setText("Porta:");

        lbUsuario.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lbUsuario.setText("Usuário:");

        lbSenha.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lbSenha.setText("Senha:");

        lbNomeDoBanco.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lbNomeDoBanco.setText("Nome do Banco:");

        jcbBancoDeDados.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jcbBancoDeDados.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PostgreeSQL" }));
        jcbBancoDeDados.setSelectedIndex(-1);
        jcbBancoDeDados.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                jcbBancoDeDadosPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        jtfServidor.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jtfUsuario.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jtfPorta.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jtfNmBancoDeDados.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        btSelecionarBancoDeDados.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btSelecionarBancoDeDados.setText("Selecionar Banco");
        btSelecionarBancoDeDados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSelecionarBancoDeDadosActionPerformed(evt);
            }
        });

        jcbNmBancoDeDados.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jcbNmBancoDeDados.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                jcbNmBancoDeDadosPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        btConectar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btConectar.setText("Conectar");
        btConectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConectarActionPerformed(evt);
            }
        });

        jpfSenha.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lbBancoDeDados)
                    .addComponent(lbServidor)
                    .addComponent(lbPorta)
                    .addComponent(lbSenha)
                    .addComponent(lbNomeDoBanco)
                    .addComponent(btSelecionarBancoDeDados)
                    .addComponent(lbUsuario))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jpfSenha, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jcbNmBancoDeDados, javax.swing.GroupLayout.Alignment.LEADING, 0, 222, Short.MAX_VALUE)
                            .addComponent(jtfNmBancoDeDados, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jtfServidor)
                            .addComponent(jtfPorta, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtfUsuario)
                            .addComponent(jcbBancoDeDados, 0, 222, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btConectar)))
                .addGap(31, 31, 31))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jcbBancoDeDados, jcbNmBancoDeDados, jpfSenha, jtfNmBancoDeDados, jtfPorta, jtfServidor, jtfUsuario});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbBancoDeDados)
                    .addComponent(jcbBancoDeDados, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfServidor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbServidor))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbPorta)
                    .addComponent(jtfPorta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbUsuario)
                    .addComponent(btConectar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbSenha)
                    .addComponent(jpfSenha, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btSelecionarBancoDeDados)
                    .addComponent(jcbNmBancoDeDados, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfNmBancoDeDados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbNomeDoBanco))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jcbBancoDeDados, jcbNmBancoDeDados, jpfSenha, jtfNmBancoDeDados, jtfPorta, jtfServidor, jtfUsuario});

        javax.swing.GroupLayout painelConexaoLayout = new javax.swing.GroupLayout(painelConexao);
        painelConexao.setLayout(painelConexaoLayout);
        painelConexaoLayout.setHorizontalGroup(
            painelConexaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelConexaoLayout.createSequentialGroup()
                .addContainerGap(101, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(94, 94, 94))
        );
        painelConexaoLayout.setVerticalGroup(
            painelConexaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelConexaoLayout.createSequentialGroup()
                .addGap(151, 151, 151)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(158, Short.MAX_VALUE))
        );

        painelGuiaPrincipal.addTab("Conexão", painelConexao);

        btTodasTabelas.setText("Todas");
        btTodasTabelas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btTodasTabelasActionPerformed(evt);
            }
        });

        btEscolherTabela.setText(">");
        btEscolherTabela.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEscolherTabelaActionPerformed(evt);
            }
        });

        btRetornaTabela.setText("<");
        btRetornaTabela.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRetornaTabelaActionPerformed(evt);
            }
        });

        btRetornaTodos.setText("Limpar");
        btRetornaTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRetornaTodosActionPerformed(evt);
            }
        });

        btDefinirTabelas.setText("Definir Tabelas");
        btDefinirTabelas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDefinirTabelasActionPerformed(evt);
            }
        });

        btVoltarConexao.setText("Voltar");
        btVoltarConexao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btVoltarConexaoActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tabelas Escolhidas", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12), new java.awt.Color(0, 0, 0))); // NOI18N

        tabelasEscolhidas.setModel(tmTabelasEscolhidas);
        tabelasEscolhidas.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(tabelasEscolhidas);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 316, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tabelas Dísponiveis", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12), new java.awt.Color(0, 0, 0))); // NOI18N

        tabelasDoBanco.setModel(tmTabelasDoBanco);
        tabelasDoBanco.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(tabelasDoBanco);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 471, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout painelTabelasLayout = new javax.swing.GroupLayout(painelTabelas);
        painelTabelas.setLayout(painelTabelasLayout);
        painelTabelasLayout.setHorizontalGroup(
            painelTabelasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelTabelasLayout.createSequentialGroup()
                .addGap(143, 143, 143)
                .addComponent(btVoltarConexao)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btDefinirTabelas)
                .addGap(97, 97, 97))
            .addGroup(painelTabelasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelTabelasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btEscolherTabela, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btTodasTabelas)
                    .addComponent(btRetornaTabela, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btRetornaTodos))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        painelTabelasLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btEscolherTabela, btRetornaTabela, btRetornaTodos, btTodasTabelas});

        painelTabelasLayout.setVerticalGroup(
            painelTabelasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelTabelasLayout.createSequentialGroup()
                .addGroup(painelTabelasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelTabelasLayout.createSequentialGroup()
                        .addGap(222, 222, 222)
                        .addComponent(btTodasTabelas)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btEscolherTabela)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btRetornaTabela)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btRetornaTodos))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelTabelasLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(painelTabelasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelTabelasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btDefinirTabelas)
                    .addComponent(btVoltarConexao))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        painelTabelasLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btEscolherTabela, btRetornaTabela, btRetornaTodos, btTodasTabelas});

        painelGuiaPrincipal.addTab("Tabelas", painelTabelas);

        btCriarAgente.setText("Novo Agente");
        btCriarAgente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCriarAgenteActionPerformed(evt);
            }
        });

        btTodosAgentes.setText("Todos");
        btTodosAgentes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btTodosAgentesActionPerformed(evt);
            }
        });

        btSelecionaAgente.setText(">");
        btSelecionaAgente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSelecionaAgenteActionPerformed(evt);
            }
        });

        btRetornaAgente.setText("<");
        btRetornaAgente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRetornaAgenteActionPerformed(evt);
            }
        });

        btLimparAgentes.setText("Limpar");
        btLimparAgentes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLimparAgentesActionPerformed(evt);
            }
        });

        btDefinirAgentes.setText("Definir Agentes");
        btDefinirAgentes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDefinirAgentesActionPerformed(evt);
            }
        });

        btVoltarTabelas.setText("Voltar");
        btVoltarTabelas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btVoltarTabelasActionPerformed(evt);
            }
        });

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Agentes Disponíveis", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12), new java.awt.Color(0, 0, 0))); // NOI18N

        tabelaAgentes.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tabelaAgentes.setModel(tmAgentes);
        tabelaAgentes.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tabelaAgentes.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(tabelaAgentes);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Agentes Escolhidos", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12), new java.awt.Color(0, 0, 0))); // NOI18N

        tabelaAgentesSelecionados.setModel(tmAgentesEscolhidos);
        tabelaAgentesSelecionados.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tabelaAgentesSelecionados.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(tabelaAgentesSelecionados);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout painelAgentesLayout = new javax.swing.GroupLayout(painelAgentes);
        painelAgentes.setLayout(painelAgentesLayout);
        painelAgentesLayout.setHorizontalGroup(
            painelAgentesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelAgentesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelAgentesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(painelAgentesLayout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(painelAgentesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btSelecionaAgente, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btTodosAgentes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btRetornaAgente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btLimparAgentes, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)))
                    .addGroup(painelAgentesLayout.createSequentialGroup()
                        .addComponent(btVoltarTabelas)
                        .addGap(283, 283, 283)
                        .addComponent(btCriarAgente)))
                .addGroup(painelAgentesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelAgentesLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btDefinirAgentes)
                        .addGap(64, 64, 64))
                    .addGroup(painelAgentesLayout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        painelAgentesLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btLimparAgentes, btRetornaAgente, btTodosAgentes});

        painelAgentesLayout.setVerticalGroup(
            painelAgentesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelAgentesLayout.createSequentialGroup()
                .addGroup(painelAgentesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelAgentesLayout.createSequentialGroup()
                        .addGap(181, 181, 181)
                        .addComponent(btTodosAgentes)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btSelecionaAgente)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btRetornaAgente)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btLimparAgentes))
                    .addGroup(painelAgentesLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(painelAgentesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 17, Short.MAX_VALUE)
                .addGroup(painelAgentesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btCriarAgente)
                    .addComponent(btVoltarTabelas)
                    .addComponent(btDefinirAgentes))
                .addContainerGap())
        );

        painelAgentesLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btLimparAgentes, btRetornaAgente, btSelecionaAgente, btTodosAgentes});

        painelAgentesLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jPanel4, jPanel5});

        painelGuiaPrincipal.addTab("Agentes", painelAgentes);

        tabelaClassificacao.setModel(tmClassificacao);
        tabelaClassificacao.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tabelaClassificacao.getTableHeader().setReorderingAllowed(false);
        jScrollPane5.setViewportView(tabelaClassificacao);

        lbMsgClassificacao.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lbMsgClassificacao.setText("Processando...");

        btDivergencias.setText("Verificar Dirvegências");
        btDivergencias.setEnabled(false);
        btDivergencias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDivergenciasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout painelClassificarLayout = new javax.swing.GroupLayout(painelClassificar);
        painelClassificar.setLayout(painelClassificarLayout);
        painelClassificarLayout.setHorizontalGroup(
            painelClassificarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelClassificarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 774, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelClassificarLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbMsgClassificacao, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(70, 70, 70)
                .addComponent(btDivergencias)
                .addGap(47, 47, 47))
        );
        painelClassificarLayout.setVerticalGroup(
            painelClassificarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelClassificarLayout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 471, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(painelClassificarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btDivergencias)
                    .addComponent(lbMsgClassificacao, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        painelGuiaPrincipal.addTab("Classificação", painelClassificar);

        tabelaDivegencia.setModel(tmDirvegencia);
        tabelaDivegencia.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tabelaDivegencia.getTableHeader().setReorderingAllowed(false);
        jScrollPane6.setViewportView(tabelaDivegencia);

        btVoltarClassificacao.setText("Voltar");
        btVoltarClassificacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btVoltarClassificacaoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addComponent(btVoltarClassificacao)
                .addContainerGap(656, Short.MAX_VALUE))
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel6Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 774, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(522, Short.MAX_VALUE)
                .addComponent(btVoltarClassificacao)
                .addGap(23, 23, 23))
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel6Layout.createSequentialGroup()
                    .addGap(32, 32, 32)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 477, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(59, Short.MAX_VALUE)))
        );

        painelGuiaPrincipal.addTab("Dirvegências", jPanel6);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(painelGuiaPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, 799, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(painelGuiaPrincipal)
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(815, 639));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btSelecionarBancoDeDadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSelecionarBancoDeDadosActionPerformed
        //Verifica se os dados estão preenchidos corretamente
        if(FuncaoJCB.validarSelecao(jcbBancoDeDados) && FuncaoJTF.validarString(jtfServidor) && 
           FuncaoJTF.validarInteiroPositivo(jtfPorta) && FuncaoJTF.validarString(jtfUsuario)){
            //Atribiu valores digitado nos campos pelo usuário a variavel global conexão
            setarObjetoConexao();
              
            if(FuncaoConexao.selectBancoDeDados()){//prenche a lista dos banco de dados que existe na conexão
                try {                        
                    FuncaoJCB.listarBancoDeDados(jcbNmBancoDeDados);//preenche jcombobox  
                    btSelecionarBancoDeDados.setEnabled(false);//Inativa o botão Selecionar Banco
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null,"ERRO: Ao preencher Combobox selecionar banco de dados\n"+e.getMessage());
                }
            }
        }
    }//GEN-LAST:event_btSelecionarBancoDeDadosActionPerformed

    private void btConectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConectarActionPerformed
         //Verifica se os dados estão preenchidos corretamente
        if(FuncaoJCB.validarSelecao(jcbBancoDeDados) && FuncaoJTF.validarInteiroPositivo(jtfPorta) &&
          FuncaoJTF.validarString(jtfServidor) && FuncaoJTF.validarString(jtfUsuario) && 
          FuncaoJTF.validarString(jtfNmBancoDeDados)){
            
            setarObjetoConexao();//Atribiu valores a variavel global conexão
      
               if(FuncaoConexao.selectTabelasDoBanco()){ //preenche a lista das tabelas do banco de dados selecionado
               painelGuiaPrincipal.setSelectedIndex(1); //mudança de painel
               preencherTabelaDoBanco(); //preenchimento das tabelas no painel Tabelas
               }
        }
    }//GEN-LAST:event_btConectarActionPerformed

    private void btTodasTabelasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btTodasTabelasActionPerformed
        //Limpa as tabelas do Banco
        while (tmTabelasDoBanco.getRowCount() > 0) {
            tmTabelasDoBanco.removeRow(0);
        }
         //Limpa as tabelas Escolhidas
        while (tmTabelasEscolhidas.getRowCount() > 0) {
            tmTabelasEscolhidas.removeRow(0);
        }
        
        //preenche as tabelas Escolhidas com a lista com todas as tabelas do banco
        for (int i = 0; i < Conexao.listaTabelasDoBanco.size(); i++) {
            try {
            tmTabelasEscolhidas.addRow(linha);
            tmTabelasEscolhidas.setValueAt(Conexao.listaTabelasDoBanco.get(i), i, 0);    
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null,"ERRO: Botao Todas\n"+e.getMessage());
            }
            
        }

    }//GEN-LAST:event_btTodasTabelasActionPerformed

    private void btEscolherTabelaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEscolherTabelaActionPerformed
        //Verifica se alguma tabela foi selecionada
        if(tabelasDoBanco.getSelectedRow() >= 0){            
            try {
              tmTabelasEscolhidas.addRow(linha);//add a linha a tabela
              //passo o valor da linha selecionada das tabelas do banco para outra tabela
              tmTabelasEscolhidas.setValueAt(tmTabelasDoBanco.getValueAt(tabelasDoBanco.getSelectedRow(), 0), 
              tmTabelasEscolhidas.getRowCount()-1, 0);
              //Retira a linha que foi selecionada
              tmTabelasDoBanco.removeRow(tabelasDoBanco.getSelectedRow());   
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "ERRO: Botao > \n"+e.getMessage());
            }
           
        }else{
            JOptionPane.showMessageDialog(null, "Nenhuma Tabela do Banco foi Selecionada");
        }
    }//GEN-LAST:event_btEscolherTabelaActionPerformed

    private void btRetornaTabelaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRetornaTabelaActionPerformed
        //Verifica se alguma tabela foi selecionada
        if(tabelasEscolhidas.getSelectedRow() >= 0){
            try {
              tmTabelasDoBanco.addRow(linha);//add a linha a tabela
            //passo o valor da linha selecionada da tabela escolhida para outra tabela
            tmTabelasDoBanco.setValueAt(tmTabelasEscolhidas.getValueAt(tabelasEscolhidas.getSelectedRow(), 0), 
            tmTabelasDoBanco.getRowCount()-1, 0);
             //Retira a linha que foi selecionada
            tmTabelasEscolhidas.removeRow(tabelasEscolhidas.getSelectedRow());  
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null,"ERRO: Botao < \n"+e.getMessage());
            }
            
        }else{
            JOptionPane.showMessageDialog(null, "Nenhuma Tabela foi Selecionada");

        }
    }//GEN-LAST:event_btRetornaTabelaActionPerformed

    private void btRetornaTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRetornaTodosActionPerformed
        //Limpa as tabelas do Banco
        while (tmTabelasDoBanco.getRowCount() > 0) {
            tmTabelasDoBanco.removeRow(0);
        }
        //Limpa as tabelas do Banco
        while (tmTabelasEscolhidas.getRowCount() > 0) {
            tmTabelasEscolhidas.removeRow(0);
        }
        //preenche as tabelas do banco com a lista com todas as tabelas do banco
        preencherTabelaDoBanco();
    }//GEN-LAST:event_btRetornaTodosActionPerformed

    private void btDefinirTabelasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDefinirTabelasActionPerformed
      //Preenche a lista das tabelas que o usuário selecionou
      preencherListaTabelaSelecionadas();
       
      //Verifica se o usuário escolheu alguma tabela
      if(listaTabelasSelecionadas.isEmpty()){
          JOptionPane.showMessageDialog(null,"Nenhuma Tabela Foi Selecionada");
      }else{        
          //Abre o Arquivo que contém a lista de agentes disponiveis 
          if(Agente.abrirArquivoAgente()){
              //JOptionPane.showMessageDialog(null, "Arquivo Lido com Sucesso");
              preencherTabelaAgentes();//Preenche a tabela com os Agentes
          }

          painelGuiaPrincipal.setSelectedIndex(2);//Mudança para o painel Agente

      }
    }//GEN-LAST:event_btDefinirTabelasActionPerformed

    private void btCriarAgenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCriarAgenteActionPerformed
       //Verifica se a tela de agente já foi criada alguma vez
       if(telaAgente == null){
       telaAgente = new TelaAgente(this);
       }       
       telaAgente.setVisible(true);
       telaAgente.limparCampos();
       telaAgente.preencherTabelaAgentes();
       this.setEnabled(false);//desativa a tela principal
    }//GEN-LAST:event_btCriarAgenteActionPerformed

    private void btTodosAgentesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btTodosAgentesActionPerformed
          //Limpa as tabelas dos agentes
        while (tmAgentes.getRowCount() > 0) {
            tmAgentes.removeRow(0);
        }
         //Limpa as tabelas dos agentes Escolhidos
        while (tmAgentesEscolhidos.getRowCount() > 0) {
            tmAgentesEscolhidos.removeRow(0);
        }
        
        //preenche as tabelas dos agentes escolhidos com a lista com todas os agentes
        for (int i = 0; i < Agente.listaDeAgentes.size(); i++) {
            try {
                tmAgentesEscolhidos.addRow(linha2);
                tmAgentesEscolhidos.setValueAt(Agente.listaDeAgentes.get(i).getNmAgente(), i, 0); 
                tmAgentesEscolhidos.setValueAt(Agente.listaDeAgentes.get(i).getPerfilAgente(), i, 1); 
                tmAgentesEscolhidos.setValueAt(Agente.listaDeAgentes.get(i).getMetaDados(), i, 2); 
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null,"ERRO:"+e.getMessage());
            }
            
        }
    }//GEN-LAST:event_btTodosAgentesActionPerformed

    private void btLimparAgentesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLimparAgentesActionPerformed
        limparPainelAgente();
        //preenche as tabelas dos agentes atraves da lista dos agentes
        preencherTabelaAgentes();
    }//GEN-LAST:event_btLimparAgentesActionPerformed

    private void btSelecionaAgenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSelecionaAgenteActionPerformed
          //Verifica se alguma tabela foi selecionada
        if(tabelaAgentes.getSelectedRow() >= 0){            
            try {
              tmAgentesEscolhidos.addRow(linha2);//add a linha a tabela agentes escolhidos
              //passo o valor da linha selecionada das tabelas dos agentes para outra tabela
              tmAgentesEscolhidos.setValueAt(tmAgentes.getValueAt(tabelaAgentes.getSelectedRow(), 0), 
              tmAgentesEscolhidos.getRowCount()-1, 0);
              tmAgentesEscolhidos.setValueAt(tmAgentes.getValueAt(tabelaAgentes.getSelectedRow(), 1), 
              tmAgentesEscolhidos.getRowCount()-1, 1);
              tmAgentesEscolhidos.setValueAt(tmAgentes.getValueAt(tabelaAgentes.getSelectedRow(), 2), 
              tmAgentesEscolhidos.getRowCount()-1, 2);
              
              //Retira a linha que foi selecionada
              tmAgentes.removeRow(tabelaAgentes.getSelectedRow());   
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "ERRO:"+e.getMessage());
            }
           
        }else{
            JOptionPane.showMessageDialog(null, "Nenhuma Tabela dos Agentes foi Selecionada");
        }
    }//GEN-LAST:event_btSelecionaAgenteActionPerformed

    private void btRetornaAgenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRetornaAgenteActionPerformed
          //Verifica se alguma tabela foi selecionada
        if(tabelaAgentesSelecionados.getSelectedRow() >= 0){
            try {
              tmAgentes.addRow(linha);//add a linha a tabela
            //passo o valor da linha selecionada da tabela escolhida para outra tabela
            tmAgentes.setValueAt(tmAgentesEscolhidos.getValueAt(tabelaAgentesSelecionados.getSelectedRow(), 0), 
            tmAgentes.getRowCount()-1, 0);
            tmAgentes.setValueAt(tmAgentesEscolhidos.getValueAt(tabelaAgentesSelecionados.getSelectedRow(), 1), 
            tmAgentes.getRowCount()-1, 1);
            tmAgentes.setValueAt(tmAgentesEscolhidos.getValueAt(tabelaAgentesSelecionados.getSelectedRow(), 2), 
            tmAgentes.getRowCount()-1, 2);
            
             //Retira a linha que foi selecionada
            tmAgentesEscolhidos.removeRow(tabelaAgentesSelecionados.getSelectedRow());  
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null,"ERRO:"+e.getMessage());
            }
            
        }else{
            JOptionPane.showMessageDialog(null, "Nenhuma Tabela foi Selecionada");

        }
    }//GEN-LAST:event_btRetornaAgenteActionPerformed

    private void btDefinirAgentesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDefinirAgentesActionPerformed
    //Preenche a lista dos agentes que foram selecionados pelo o usuário 
      preencherListaAgentesSelecionados();
   //ajeitar essa classificação
      boolean verificaComando = true; //variavel de controle de erro
      boolean verificaColuna = true;  //variavel de controle de erro
      
      //Verifica se o usuário escolheu alguma tabela
      if(listaAgentesSelecionados.isEmpty()){
          JOptionPane.showMessageDialog(null,"Nenhuma Agente Foi Selecionado");
      }else{        
          
        //Verifica se a coluna classification da tabela existe, se existe a coluna é apagada para uma nova classificação
          for (int i = 0; i < listaTabelasSelecionadas.size(); i++) {
              if(AgenteDAO.verificarColunaClassification(listaTabelasSelecionadas.get(i)) == true){
                 AgenteDAO.apagarColunaClassification(listaTabelasSelecionadas.get(i));
              }                  
          }
          
          for (int i = 0; i < listaTabelasSelecionadas.size(); i++) {
               AgenteDAO.criarColunaClassification(listaTabelasSelecionadas.get(i));
          }
          
           //Verifica se a coluna da tabela foi inserida Corretamente
          for (int i = 0; i < listaTabelasSelecionadas.size(); i++) {
              if(AgenteDAO.verificarColunaClassification(listaTabelasSelecionadas.get(i)) == false){
                  verificaColuna = false;
              }
          }              
   
            for (int i = 0; i < listaAgentesSelecionados.size(); i++) {
                for (int j = 0; j < listaTabelasSelecionadas.size(); j++) {                                             
                   if(AgenteDAO.verificarDoPerfilDosAgentes(listaTabelasSelecionadas.get(j), listaAgentesSelecionados.get(i)) ==  false){
                       verificaComando = false;
                       //JOptionPane.showMessageDialog(null, "Comando Invalido para Tabela "+listaTabelasSelecionadas.get(j)+" e Agente "+
                      // listaAgentesSelecionados.get(i).getNmAgente());
                       i = listaAgentesSelecionados.size(); //sair do laço
                       j = listaTabelasSelecionadas.size();
                   }                       
                }
            }              

          //se todos os comandos estiverem corretos o processo de classificação iniciará
         if(verificaComando == true){  
                painelGuiaPrincipal.setSelectedIndex(3);//Mudança para o painel Classificação
                for (int i = 0; i < listaAgentesSelecionados.size(); i++) { 
                   Thread t = new ThreadAgente(listaAgentesSelecionados.get(i),this);
                   t.start();                  
                 }
          }       
          
        
      }
    }//GEN-LAST:event_btDefinirAgentesActionPerformed

    private void btVoltarConexaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btVoltarConexaoActionPerformed
     limparPainelConexao();
     painelGuiaPrincipal.setSelectedIndex(0);
    }//GEN-LAST:event_btVoltarConexaoActionPerformed

    private void jcbNmBancoDeDadosPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_jcbNmBancoDeDadosPopupMenuWillBecomeInvisible
        if(jcbNmBancoDeDados.getItemCount() > 0){
            try {
              jtfNmBancoDeDados.setText(FuncaoJCB.getBancoSelecionado(jcbNmBancoDeDados.getSelectedIndex()));  
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null,"ERRO:"+e.getMessage());
            }
        }
    }//GEN-LAST:event_jcbNmBancoDeDadosPopupMenuWillBecomeInvisible

    private void jcbBancoDeDadosPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_jcbBancoDeDadosPopupMenuWillBecomeInvisible
       //Atribuindo valores padrões aos campos para otimizar o processo
        if(jcbBancoDeDados.getSelectedIndex() == 0){
            jtfPorta.setText("5432");
            jtfServidor.setText("localhost");
            jtfUsuario.setText("postgres");
            jpfSenha.requestFocus();
        }
    }//GEN-LAST:event_jcbBancoDeDadosPopupMenuWillBecomeInvisible

    private void btVoltarTabelasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btVoltarTabelasActionPerformed
        painelGuiaPrincipal.setSelectedIndex(1);
        limparPainelTabelas();
        limparPainelAgente();
    }//GEN-LAST:event_btVoltarTabelasActionPerformed

    private void btDivergenciasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDivergenciasActionPerformed
       painelGuiaPrincipal.setSelectedIndex(4);//Mudança para o painel Divergencia
    }//GEN-LAST:event_btDivergenciasActionPerformed

    private void btVoltarClassificacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btVoltarClassificacaoActionPerformed
       painelGuiaPrincipal.setSelectedIndex(3);//Mudança para o painel Classificação
    }//GEN-LAST:event_btVoltarClassificacaoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btConectar;
    private javax.swing.JButton btCriarAgente;
    private javax.swing.JButton btDefinirAgentes;
    private javax.swing.JButton btDefinirTabelas;
    private javax.swing.JButton btDivergencias;
    private javax.swing.JButton btEscolherTabela;
    private javax.swing.JButton btLimparAgentes;
    private javax.swing.JButton btRetornaAgente;
    private javax.swing.JButton btRetornaTabela;
    private javax.swing.JButton btRetornaTodos;
    private javax.swing.JButton btSelecionaAgente;
    private javax.swing.JButton btSelecionarBancoDeDados;
    private javax.swing.JButton btTodasTabelas;
    private javax.swing.JButton btTodosAgentes;
    private javax.swing.JButton btVoltarClassificacao;
    private javax.swing.JButton btVoltarConexao;
    private javax.swing.JButton btVoltarTabelas;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JComboBox jcbBancoDeDados;
    private javax.swing.JComboBox jcbNmBancoDeDados;
    private javax.swing.JPasswordField jpfSenha;
    private javax.swing.JTextField jtfNmBancoDeDados;
    private javax.swing.JTextField jtfPorta;
    private javax.swing.JTextField jtfServidor;
    private javax.swing.JTextField jtfUsuario;
    private javax.swing.JLabel lbBancoDeDados;
    private javax.swing.JLabel lbMsgClassificacao;
    private javax.swing.JLabel lbNomeDoBanco;
    private javax.swing.JLabel lbPorta;
    private javax.swing.JLabel lbSenha;
    private javax.swing.JLabel lbServidor;
    private javax.swing.JLabel lbUsuario;
    private javax.swing.JPanel painelAgentes;
    private javax.swing.JPanel painelClassificar;
    private javax.swing.JPanel painelConexao;
    private javax.swing.JTabbedPane painelGuiaPrincipal;
    private javax.swing.JPanel painelTabelas;
    private javax.swing.JTable tabelaAgentes;
    private javax.swing.JTable tabelaAgentesSelecionados;
    private javax.swing.JTable tabelaClassificacao;
    private javax.swing.JTable tabelaDivegencia;
    private javax.swing.JTable tabelasDoBanco;
    private javax.swing.JTable tabelasEscolhidas;
    // End of variables declaration//GEN-END:variables

    //atribui valores a variavel global conexao
    private void setarObjetoConexao(){
       Conexao.setHost(FuncaoJTF.getString(jtfServidor));
       Conexao.setPorta(FuncaoJTF.getInteiro(jtfPorta));
       Conexao.setSenha(FuncaoJTF.getSenha(jpfSenha));
       Conexao.setUsuario(FuncaoJTF.getString(jtfUsuario));
       Conexao.setNomeDoBanco(FuncaoJTF.getString(jtfNmBancoDeDados));
    }

    private void preencherTabelaDoBanco(){
     //Limpar as linhas das tabelas do banco
      while (tmTabelasDoBanco.getRowCount() > 0) {
        tmTabelasDoBanco.removeRow(0);
      }           
      
       //Verifica se a lista está vazia   
       if(Conexao.listaTabelasDoBanco.isEmpty()){
         JOptionPane.showMessageDialog(null,"Não Existe Tabelas Para O Banco de Dados Escolhido");
         limparPainelConexao();//limpa os dados do painel conexão
         painelGuiaPrincipal.setSelectedIndex(0);//volta para o painel conexão    
       }
       else{        
           //Pecorre a lista e prenche os valores das tabelas
           for (int i = 0; i < Conexao.listaTabelasDoBanco.size(); i++) {  
               try {
                  tmTabelasDoBanco.addRow(linha);
                  tmTabelasDoBanco.setValueAt(Conexao.listaTabelasDoBanco.get(i), i, 0); 
               } catch (Exception e) {
                   JOptionPane.showMessageDialog(null,"ERRO: Ao preencher lista de tabelas\n"+e.getMessage());
               }
           }
       }
    
    }//fim funcao preencher tabelasDOBanco
   
    private void preencherListaTabelaSelecionadas(){
          //limpa a lista com as tabelas  
          listaTabelasSelecionadas.clear();      
            for (int i = 0; i < tmTabelasEscolhidas.getRowCount(); i++) {                
                try {
                   String nmTabela = tmTabelasEscolhidas.getValueAt(i, 0).toString();
                   listaTabelasSelecionadas.add(nmTabela); 
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null,"ERRO:"+e.getMessage());
                }
            }
    }
    
    private void preencherListaAgentesSelecionados(){    
        //limpar a lista dos agentes
        listaAgentesSelecionados.clear();
       for (int i = 0; i < tmAgentesEscolhidos.getRowCount(); i++) {
           try {
               Agente a = new Agente();
               a.setNmAgente(tmAgentesEscolhidos.getValueAt(i, 0).toString());
               a.setPerfilAgente(tmAgentesEscolhidos.getValueAt(i, 1).toString());
               a.setMetaDados(tmAgentesEscolhidos.getValueAt(i, 2).toString());
               listaAgentesSelecionados.add(a);
            } catch (Exception e) {
               JOptionPane.showMessageDialog(null, e.getMessage());
           }
       }  
    }
    
    private void preencherTabelaAgentes(){
      //Limpar tabelas do Agente
      while (tmAgentes.getRowCount() > 0) {
        tmAgentes.removeRow(0);
      }
        //Verifica se a lista dos agentes está vazia
       if(Agente.listaDeAgentes.isEmpty()){
         JOptionPane.showMessageDialog(null,"Não Existe Agentes Cadastrados");
       }else{        
           //Preenche a tabela com os agentes existentes
           for (int i = 0; i < Agente.listaDeAgentes.size(); i++) {   
               try {
                    tmAgentes.addRow(linha3);
                    tmAgentes.setValueAt(Agente.listaDeAgentes.get(i).getNmAgente(), i, 0);
                    tmAgentes.setValueAt(Agente.listaDeAgentes.get(i).getPerfilAgente(), i, 1); 
                    tmAgentes.setValueAt(Agente.listaDeAgentes.get(i).getMetaDados(), i, 2); 
               } catch (Exception e) {
                   JOptionPane.showMessageDialog(null,"ERRO:"+e.getMessage());
               }             
           }
       }
    }
   
    public void limparPainelAgente(){
         //Limpa as tabelas dos agentes
        while (tmAgentes.getRowCount() > 0) {
            tmAgentes.removeRow(0);
        }
         //Limpa as tabelas dos agentes Escolhidos
        while (tmAgentesEscolhidos.getRowCount() > 0) {
            tmAgentesEscolhidos.removeRow(0);
        }
        
        listaAgentesSelecionados.clear();
        preencherTabelaAgentes();
    }
    
    private void limparPainelConexao(){
        try {
            Conexao.setHost("");
            Conexao.setPorta(0);
            Conexao.setSenha("");
            Conexao.setUsuario("");
            Conexao.setNomeDoBanco("");
            jcbBancoDeDados.setSelectedIndex(-1);
            jcbNmBancoDeDados.removeAllItems();
            jtfPorta.setText("");
            jtfServidor.setText("");
            jtfNmBancoDeDados.setText("");
            jtfUsuario.setText("");
            btSelecionarBancoDeDados.setEnabled(true);
            jtfNmBancoDeDados.setEditable(true);
            jpfSenha.setText(""); 
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
       
    }
    
    private void limparPainelTabelas(){
        while (tmTabelasDoBanco.getRowCount() > 0) {
            tmTabelasDoBanco.removeRow(0);
        }

        while (tmTabelasEscolhidas.getRowCount() > 0) {
            tmTabelasEscolhidas.removeRow(0);
        }
        
        listaTabelasSelecionadas.clear();
        preencherTabelaDoBanco();
    }

    public void mostrarClassificacao(boolean situacao, String tabela, String agente){
        String nmSituacao;
        
        
        if(situacao == true){
            nmSituacao = "Classificado";
            indiceTerminoThreads = indiceTerminoThreads + 1;
        }else{
            nmSituacao = "Não Classificado";
        }
        
                   
        try {
            tmClassificacao.addRow(linha3);
            tmClassificacao.setValueAt(agente, tabelaClassificacao.getRowCount()-1, 0);
            tmClassificacao.setValueAt(tabela ,tabelaClassificacao.getRowCount()-1, 1);
            tmClassificacao.setValueAt(nmSituacao, tabelaClassificacao.getRowCount()-1, 2);
        } catch (Exception e) {
            JOptionPane.showConfirmDialog(null, "ERRO na Tabela Classificação: "+e.getMessage());
        }
          
        
        
        if(indiceTerminoThreads >= (listaAgentesSelecionados.size() * listaTabelasSelecionadas.size())){
         //JOptionPane.showMessageDialog(null, "Classificação Terminada com Sucesso!!");
         lbMsgClassificacao.setText("Agente Controlador Verificando Divergências...");
               
            //System.out.println("Terminou os agentes");


            int indiceX;
            int indiceY;

             for (int i = 0; i < listaTabelasSelecionadas.size(); i++) {
                 indiceX = 0;

                 while(indiceX != (listaAgentesSelecionados.size()-1)){

                     indiceY = indiceX;
                     while(indiceY != (listaAgentesSelecionados.size()-1)){
                        
                         AgenteControlador.classificarDivergencias(listaAgentesSelecionados.get(indiceX),listaAgentesSelecionados.get(indiceY+1) , listaTabelasSelecionadas.get(i));                       
                          try {
                                tmDirvegencia.addRow(linha4);
                                tmDirvegencia.setValueAt(listaAgentesSelecionados.get(indiceX).getNmAgente(), tabelaDivegencia.getRowCount()-1, 0);
                                tmDirvegencia.setValueAt(listaAgentesSelecionados.get(indiceY+1).getNmAgente() ,tabelaDivegencia.getRowCount()-1, 1);
                                tmDirvegencia.setValueAt(listaTabelasSelecionadas.get(i), tabelaDivegencia.getRowCount()-1, 2);   
                                tmDirvegencia.setValueAt(AgenteControlador.contadorDivergencias(listaAgentesSelecionados.get(indiceX),listaAgentesSelecionados.get(indiceY+1) , listaTabelasSelecionadas.get(i)), tabelaDivegencia.getRowCount()-1, 3);  
                          } catch (Exception e) {
                                JOptionPane.showConfirmDialog(null, "ERRO ao exibir Dirvergencias: "+e.getMessage());
                            }
                        

                         indiceY = indiceY + 1;
                     }//while indiceY
                         //System.out.println("saiu do laco Y");
                         indiceX = indiceX + 1;
                }//while indiceX
                //System.out.println("saiu do laco X");
                }//for
             
              lbMsgClassificacao.setText("Classificação Terminada com Sucesso!!");
              btDivergencias.setEnabled(true);
        }
        
        
       }

}
